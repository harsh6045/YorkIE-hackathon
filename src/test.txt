Here's a clean, well-commented Python code that implements the described weather widget functionality:

```python
import requests
import json
import geocoder
from datetime import datetime
import tkinter as tk
from tkinter import ttk
import threading
import time

# OpenWeatherMap API key (replace with your own)
API_KEY = "your_api_key_here"

class WeatherWidget:
    def __init__(self, root):
        self.root = root
        self.root.title("Weather Widget")
        
        # Set up the main frame
        self.frame = ttk.Frame(root, padding="10")
        self.frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Weather data display
        self.weather_label = ttk.Label(self.frame, text="Loading weather data...")
        self.weather_label.grid(column=0, row=0, columnspan=2)
        
        # Temperature unit toggle
        self.temp_unit = tk.StringVar(value="C")
        self.temp_toggle = ttk.Checkbutton(self.frame, text="Â°F", variable=self.temp_unit, 
                                           onvalue="F", offvalue="C", command=self.update_display)
        self.temp_toggle.grid(column=2, row=0)
        
        # Wind speed unit toggle
        self.wind_unit = tk.StringVar(value="km/h")
        self.wind_toggle = ttk.Checkbutton(self.frame, text="mph", variable=self.wind_unit, 
                                           onvalue="mph", offvalue="km/h", command=self.update_display)
        self.wind_toggle.grid(column=3, row=0)
        
        # Loading spinner
        self.spinner = ttk.Progressbar(self.frame, mode="indeterminate")
        self.spinner.grid(column=0, row=1, columnspan=4, sticky=(tk.W, tk.E))
        
        # Weather icon (placeholder for now)
        self.icon_label = ttk.Label(self.frame, text="ðŸŒ¤")
        self.icon_label.grid(column=0, row=2, columnspan=4)
        
        # Contextual tip
        self.tip_label = ttk.Label(self.frame, text="")
        self.tip_label.grid(column=0, row=3, columnspan=4)
        
        # Start fetching weather data
        self.weather_data = None
        threading.Thread(target=self.fetch_weather, daemon=True).start()
    
    def fetch_weather(self):
        """Fetch weather data from OpenWeatherMap API"""
        self.spinner.start()
        
        try:
            # Get user's location (you might need to handle permissions)
            g = geocoder.ip('me')
            lat, lon = g.latlng
            
            # Make API request
            url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric"
            response = requests.get(url)
            self.weather_data = response.json()
            
            self.update_display()
        except Exception as e:
            self.weather_label.config(text=f"Error: {str(e)}\nPlease enter location manually.")
        
        self.spinner.stop()
    
    def update_display(self):
        """Update the widget display with weather data"""
        if not self.weather_data:
            return
        
        temp = self.weather_data['main']['temp']
        humidity = self.weather_data['main']['humidity']
        wind_speed = self.weather_data['wind']['speed']
        description = self.weather_data['weather'][0]['description']
        
        # Convert units if necessary
        if self.temp_unit.get() == "F":
            temp = (temp * 9/5) + 32
        
        if self.wind_unit.get() ==